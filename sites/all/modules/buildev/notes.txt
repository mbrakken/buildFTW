<?php

function microblog_page_group($group) {
  global $user;
  
  $output = '';
  
  drupal_add_js(drupal_get_path('module', 'microblog') . '/microblog.js');
  drupal_set_title($title = t("@group's microblog", array('@name' => $group->name)));
  $items = array();
  
  $replies = "microblog/". $account->gid ."/replies";
  $items[] = l(t('Replies'), $replies);

  $following = "microblog/". $account->gid ."/following";
  $items[] = l(t('Following'), $following);
  
  $followers = "microblog/". $account->gid ."/followers";
  $items[] = l(t('Followers'), $followers); 

  if (/*($account->uid == $user->uid) &&*/ user_access('post microblog entries')) {
    module_load_include('inc', 'node', 'node.pages');
    $node = new stdClass(); 
    $node->type = 'microblog';
    $node->uid = $user->uid;
    $node->language = '';
    $output .= render(drupal_get_form('microblog_node_form', $node));
  }
  else if ($account->uid == $user->uid) {
    $items[] = t('You are not allowed to post a new microblog update.');
  }
  else if ($account->uid != $user->uid) {
    $count  = db_query("SELECT COUNT(subscribed) from {microblog_subscription} WHERE subscribed = :subscribed AND subscriber = :subscriber", 
      array('subscribed' => $account->uid, 'subscriber' => $user->uid))->fetchField();
    if ($count > 0) { 
      $items[] = l(t("Stop following @name", array('@name' => $account->name)), 'microblog/'. $account->uid .'/leave', 
        array('attributes' => array('class' => 'microblog-ajax')));
    }
    else { 
      $items[] = l(t("Follow @name", array('@name' => $account->name)), 'microblog/'. $account->uid .'/follow', 
        array('attributes' => array('class' => 'microblog-ajax')));
    }
  }

  
  $output .= theme('microblog_links', array('items' => $items));
            
  if ($account->uid == $user->uid) {
    // Find updates from myself and those I subscribe to
    $subquery = db_select('microblog_subscription', 'm');
    $subquery->fields('m', array('subscribed'));
    $subquery->condition('subscriber', $user->uid);
    $query = db_select('node', 'n');
    $query->join('users', 'u', 'n.uid = u.uid');
    $result = $query
      ->fields('n', array('nid', 'uid', 'created', 'title'), 'u', array('picture', 'name'))
      ->condition('n.type', 'microblog')
      ->condition('n.status', 1)
      ->condition(db_or()->condition('n.uid', $user->uid)->condition('n.uid', array($subquery)))
      ->orderBy('n.created', 'DESC')
      ->extend('PagerDefault')
      ->limit(variable_get('default_nodes_main', '10'))
      ->execute();

  }
  else {
    $query = db_select('node', 'n');
    $query->join('users', 'u', 'n.uid = u.uid');
    $result = $query
      ->fields('n', array('nid', 'uid', 'created', 'title'), 'u', array('picture', 'name'))
      ->condition('n.type', 'microblog')
      ->condition('u.uid', $account->uid)
      ->condition('n.status', 1)
      ->orderBy('n.created', 'DESC')
      ->extend('PagerDefault')
      ->limit(variable_get('default_nodes_main', '10'))
      ->execute();
  }
  
  if ($result && !empty($result)) {
    $output .= theme('microblog_list', array('results' => $result));
  }
  else {
    if ($account->uid == $user->uid) {
      drupal_set_message(t('You have not created any microblog entries.'));
    }
    else {
      drupal_set_message(t('!author has not created any microblog entries.', array('!author' => theme('username', $account))));
    }
  }
  
  
  drupal_add_feed('microblog/'. $account->uid .'/feed', t('RSS - !title', array('!title' => $title)));

  return $output;
}

?>




//This will generate a random password, you could set your own here
  $password = user_password(8);
 
  //set up the user fields
  $fields = array(
    'name' => 'user_name',
    'mail' => 'user_name@example.com',
    'pass' => $password,
    'status' => 1,
    'init' => 'email address',
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );
 
  //the first parameter is left blank so a new user is created
  $account = user_save('', $fields);
 
  // If you want to send the welcome email, use the following code
 
  // Manually set the password so it appears in the e-mail.
  $account->password = $fields['pass'];
 
  // Send the e-mail through the user module.
  drupal_mail('user', 'register_no_approval_required', $email, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example..com'));



account->is_new = TRUE;
$account->status = TRUE;

$edit['name'] = $name;
$edit['mail'] = $name;
$edit['status'] = 1;
$edit['init'] = $name;

$newuser = user_save($account, $edit));

//send email if you want
_user_mail_notify('register_no_approval_required', $newuser);





//the user name of the new user
  $user_name = "example";
 
  //the users email address
  $email = "example@example.com";
 
  //set up the user fields using a random 8 character password
  $fields = array(
    'name' => $user_name,
    'mail' => $email,
    'pass' => user_password(8),
    'status' => 1,
  );
 
  //you can give a user roles if necessary based on the role name
  $fields['roles'] = array('test_role');
 
  //the first parameter is left blank so a new user is created
  $account = user_save('', $fields);
 
  // Manually set the password so it appears in the e-mail.
  $account->password = $fields['pass'];
 
  // Send the e-mail through the user module.
  drupal_mail('user', 'register_admin_created', $email, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example..com'));


/*
this is D6 code

*/

**
 * Creates an empty group
 *
 * @param $name
 *   The name of the group to create
 * @param $user
 *   The user to make the group owner
 */
function MYMODULE_create_group($name, $user) {
  $node = new stdClass();
  $node->type = 'MY_GROUP_TYPE';
  $node->title = $name;
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->comment = 0;
  $node->promote = 0;
 
  //Organic groups fields
  $node->og_description = 'A group managed by ' . $user->name;
  $node->og_register = 0;
  $node->og_directory = 0;
  $node->og_private = 1;
  $node->og_selective = 3;
 
  //create the node
  $node = node_submit($node);
  node_save($node);
}
