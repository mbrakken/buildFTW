<?php

/**
 * @file
 * Module for the Entityform Entity - a starting point to create your own Entity
 * and associated administration interface
 */

define('ENTITYFORM_STATUS_CLOSED', 'ENTITYFORM_CLOSED');
define('ENTITYFORM_STATUS_OPEN', 'ENTITYFORM_OPEN');
/**
 * Implements hook_menu().
 */
function entityform_menu() {
  $items = array();
  $entity_info = entity_get_info('entityform_type');
  $submissions_path = $entity_info['admin ui']['path'] . "/manage/%entityform_type/submissions";
  $path_count = count(explode('/', $submissions_path));

  $items['admin/config/content/entityform'] = array(
      'title' => 'Entityform Settings',
      'description' => '',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('entityform_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'entityform_type.admin.inc',
  );
  $items[$submissions_path] = array(
      'title' => 'Form Submissions',
      'page callback' => 'entityform_submission_page',
      'page arguments' => array($path_count - 2),
      'access arguments' => array('view any entityform'),
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/entityforms/submissions/%entityform_type'] = array(
      'title' => 'Form Submissions',
      'page callback' => 'entityform_submission_page',
      'page arguments' => array(4),
      'access arguments' => array('view any entityform'),
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}
/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function entityform_entity_info() {
  $return['entityform'] = array(
      'label' => t('Entityform'),
      // The entity class and controller class extend the classes provided by the
      // Entity API
      'entity class' => 'Entityform',
      'controller class' => 'EntityformController',
      'base table' => 'entityform',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'entityform_id',
          'bundle' => 'type',
      ),
      // Bundles are defined by the entityform types below
      'bundles' => array(),
      // Bundle keys tell the FieldAPI how to extract information from the bundle objects
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full content'),
              'custom settings' => FALSE,
          ),
          'email' => array(
              'label' => t('Email'),
              'custom settings' => FALSE,
          ),
          'confirmation' => array(
              'label' => t('Confirmation'),
              'custom settings' => FALSE,
          ),
          'download' => array(
              'label' => t('Downloads'),
              'custom settings' => FALSE,
          ),
          'table' => array(
              'label' => t('Submissions Table'),
              'custom settings' => FALSE,
          ),

      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'creation callback' => 'entityform_create',
      'access callback' => 'entityform_access',
      'module' => 'entityform',
      // The information below is used by the EntityformUIController (which extends the EntityDefaultUIController)
      'admin ui' => array(
          //@todo this goes to default submissions View, what do to if View is disabled?
          'path' => 'admin/structure/entityforms/list',
          'front path' => 'entityform',
          'file' => 'entityform.admin.inc',
          'controller class' => 'EntityformUIController',
          'menu wildcard' => '%entityform',
      ),
      'metadata controller class' => 'EntityformMetadataController',
  );
  // The entity that holds information about the entity types
  $return['entityform_type'] = array(
      'label' => t('Entityform Type'),
      'entity class' => 'EntityformType',
      'controller class' => 'EntityformTypeController',
      'base table' => 'entityform_type',
      'fieldable' => FALSE,
      'bundle of' => 'entityform',
      'exportable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'name' => 'type',
          'label' => 'label',
      ),
      'view modes' => array(
          'full' => array(
              'label' => t('Full content'),
              'custom settings' => FALSE,
          ),
      ),
      'access callback' => 'entityform_type_access',
      'module' => 'entityform',
      // Enable the entity API's admin UI.
      'admin ui' => array(
          'path' => 'admin/structure/entityform_types',
          'file' => 'entityform_type.admin.inc',
          'controller class' => 'EntityformTypeUIController',
      ),
      'metadata controller class' => 'EntityformTypeMetadataController',
  );
  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the entityform types via a hook to avoid a recursion
 * issue as loading the entityform types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function entityform_entity_info_alter(&$entity_info) {
  foreach (entityform_get_types() as $type => $info) {
    $entity_info['entityform']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/entityform_types/manage/%entityform_type',
            'real path' => 'admin/structure/entityform_types/manage/' . $type,
            'bundle argument' => 4,
            'access arguments' => array('administer entityform types'),
        ),
    );
  }
}


/**
 * Implements hook_permission().
 */
function entityform_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
      'administer entityform types' => array(
          'title' => t('Administer entityform types'),
          'description' => t('Create and delete fields for entityform types, and set their permissions.'),
      ),
      'administer entityforms' => array(
          'title' => t('Administer entityforms'),
          'description' => t('Edit and delete all entityforms'),
      ),
      "edit any entityform" => array(
          'title' => t('Edit any entityform submission'),
      ),
      "view any entityform" => array(
          'title' => t('View any entityform submission'),
      ),
  );
  return $permissions;
  //Generate permissions per entityform
  foreach (entityform_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
        "edit any $type_name entityform" => array(
            'title' => t('%type_name: Edit any entityform', array('%type_name' => $type->label)),
        ),
        "view any $type_name entityform" => array(
            'title' => t('%type_name: View any entityform', array('%type_name' => $type->label)),
        ),
        "submit $type_name entityform" => array(
            'title' => t('%type_name: Submit', array('%type_name' => $type->label)),
        ),
    );
  }
  return $permissions;
}


/**
 * Determines whether the given user has access to a entityform.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $entityform
 *   Optionally a entityform or a entityform type to check access for. If nothing is
 *   given, access for all entityforms is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function entityform_access($op, $entityform = NULL, $account = NULL) {
  // User #1 has all privileges:
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  if ($account->uid == 1) {
    return TRUE;
  }
  if (!empty($entityform)) {
    if (is_object($entityform) ) {
      $type_name = $entityform->type;
    }
    else {
      $type_name = $entityform;
    }
    $entityform_type = entityform_type_load($type_name);
  }

  global $user;
  if ($op == 'submit' || $op == 'confirm') {
    if (isset($entityform_type) && is_object($entityform_type) && is_array($entityform_type->data) && array_intersect($entityform_type->data['roles'], array_keys($user->roles))) {
      $can_submit = TRUE;
    }
    else {
      $can_submit = FALSE;
    }
    if ($op == 'submit') {
      if (!isset($entityform_type->data['form_status']) || $entityform_type->data['form_status'] != ENTITYFORM_STATUS_CLOSED) {
        return $can_submit;
      }
      return FALSE;
    }
    //confirm page
    $entityform_id = $_GET['entityform_id'];
    if (empty($user->uid)) {
      // If this is anonymous user then entityform_id should be stored in session
      if (!isset($_SESSION['entityform_submission'])) {
        return FALSE;
      }
      $match = $_SESSION['entityform_submission'] == $entityform_id;
      unset($_SESSION['entityform_submission']);
      return $match;
    }
    else {
      $entityform = entityform_load($entityform_id);
      //only grant access if this is the user who made the submission
      return $entityform->uid == $user->uid;
    }
    // return user_access("submit $type_name entityform");
  }
  if ($op == 'confirm') {

  }
  if (isset($entityform) && $type_name) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if ($op == 'view' && is_object($entityform) && !empty($user->uid) && $entityform->uid == $user->uid) {
      //for now user can always view their own submissions - anonymous users can view any submissions
      return TRUE;
    }
    if (user_access("$op any entityform", $account)) {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function entityform_type_access($op, $type = NULL, $account = NULL) {
  // If coming from EntityDrupalWrapper::entityAccess then entity type will be sent
  // This is used in EntityReferences module
  // @see EntityDrupalWrapperm, entityAccess
  if (isset($type) && is_object($type) && get_class($type) == 'EntityformType' && $op == 'view') {
    return entityform_access('submit', $type, $account);
  }
  return user_access('administer entityform types', $account);
}
function _entityform_get_entityform_views_options() {
  $views = views_get_enabled_views();
  $options = array();
  foreach ($views as $view) {
    if ($view->base_table == 'entityform') {
      foreach ($view->display as $display) {
        if ($display->display_plugin == 'page') {
          $options[$view->name] = $view->human_name;
        }
      }
    }
  }
  return $options;
}


/**
 * Gets an array of all entityform types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return EntityformType[]
 *   Depending whether $type isset, an array of entityform types or a single one.
 */
function entityform_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our entityform entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('entityform_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Get all the submissions for a user
 * @param string $type
 *   The EntityformType to restrict submissions for
 * @param int $uid
 *   uid of user to get submissions for
 * @param int $draft
 * @return array
 */
function entityform_get_submissions($type = NULL, $uid = NULL, $draft = 0) {
  if ($uid) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', "entityform");
    if ($type) {
      $query->propertyCondition('type', $type);
    }
    $query->propertyCondition('uid', $uid);
    $query->propertyCondition('draft', $draft);
    $result = $query->execute();
    if (isset($result['entityform'])) {
      return $result['entityform'];
    }
  }
  return array();
}
/**
 * Get the current draft submission if any for a user
 * @param string $type
 *   Entityform Type
 * @param int $uid
 * @return Ambigous <NULL, A, mixed>
 */
function entityform_user_draft($type, $uid = NULL) {
  return entityform_user_previous_submission($type, $uid, 1);
}
/**
 * Get previous submission for a form for a user
 * @param string $type
 * @param int $uid
 * @param int $draft
 * @return NULL|Ambigous <A, mixed>
 */
function entityform_user_previous_submission($type, $uid = NULL, $draft = 0) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  if ($uid) {
    $submissions = entityform_get_submissions($type, $uid, $draft);
    $submission = array_shift($submissions);
    if (!$submission) {
      return NULL;
    }
    else {
      return entityform_load($submission->entityform_id);
    }
  }
  return NULL;
}
/**
 * Has the user submitted a form
 * @param string $type
 * @param unknown_type $uid
 * @return boolean
 */
function entityform_user_submitted($type, $uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  $submissions = entityform_get_submissions($type, $uid);
  return !empty($submissions);
}
/**
 * Menu argument loader; Load a entityform type by string.
 *
 * @param $type
 *   The machine-readable name of a entityform type to load.
 * @return
 *   A entityform type array or FALSE if $type does not exist.
 */
function entityform_type_load($type) {
  $type = str_replace('-', '_', $type);
  return entityform_get_types($type);
}


/**
 * Fetch a entityform object. Make sure that the wildcard you choose
 * in the entityform entity definition fits the function name here.
 *
 * @param $entityform_id
 *   Integer specifying the entityform id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $entityform object or FALSE if it cannot be loaded.
 *
 * @see entityform_load_multiple()
 */
function entityform_load($entityform_id, $reset = FALSE) {
  $entityforms = entityform_load_multiple(array($entityform_id), array(), $reset);
  return reset($entityforms);
}


/**
 * Load multiple entityforms based on certain conditions.
 *
 * @param $entityform_ids
 *   An array of entityform IDs.
 * @param $conditions
 *   An array of conditions to match against the {entityform} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of entityform objects, indexed by entityform_id.
 *
 * @see entity_load()
 * @see entityform_load()
 */
function entityform_load_multiple($entityform_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('entityform', $entityform_ids, $conditions, $reset);
}


/**
 * Deletes a entityform.
 */
function entityform_delete(Entityform $entityform) {
  $entityform->delete();
}


/**
 * Delete multiple entityforms.
 *
 * @param $entityform_ids
 *   An array of entityform IDs.
 */
function entityform_delete_multiple(array $entityform_ids) {
  entity_get_controller('entityform')->delete($entityform_ids);
}


/**
 * Create a entityform object.
 */
function entityform_create($values = array()) {
  return entity_get_controller('entityform')->create($values);
}


/**
 * Saves a entityform to the database.
 *
 * @param $entityform
 *   The entityform object.
 */
function entityform_save(Entityform $entityform) {
  return $entityform->save();
}
/*
 * to be used in page arguments load function
 */
function entityform_empty_load($type) {
  $type = str_replace("-", "_", $type);
  return entityform_create(array('type' => $type));
}
/**
 * Saves a entityform type to the db.
 */
function entityform_type_save(EntityformType $type) {
  $type->save();
}


/**
 * Deletes a entityform type from the db.
 */
function entityform_type_delete(EntityformType $type) {
  $type->delete();
}


/**
 * URI callback for entityforms
 */
function entityform_uri(Entityform $entityform) {
  return array(
      'path' => 'entityform/' . $entityform->entityform_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function entityform_page_title(Entityform $entityform, $op = 'view') {
  $entityform_type = entityform_get_types($entityform->type);
  if ($op == 'submit') {
    return $entityform_type->label;
  }
  return t('Form Submission') . ': ' . $entityform_type->label;
}


/**
 * Sets up content to show an individual entityform
 * @todo - get rid of drupal_set_title();
 */
function entityform_page_view($entityform, $view_mode = 'full') {
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform));
  //drupal_set_title($entityform->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function entityform_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'entityform') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function entityform_theme() {
  return array(
      'entityform_add_list' => array(
          'variables' => array('content' => array()),
          'file' => 'entityform.admin.inc',
      ),
      'entityform' => array(
          'render element' => 'elements',
          'template' => 'entityform',
      ),
  );
}


function entityform_draft_page($entityform_type) {
  $args = func_get_args();
  array_shift($args);
  if (empty($entityform_type->data['draft_save_text'])) {
    $draft_text = t('Your submission for the form, @form_name, has been saved.', array('@form_name' => $entityform_type->label));
  }
  else {
    $draft_text = $entityform_type->data['draft_save_text'];
  }
  $render_array = array(
      'submit_text' => array(
          '#type' => 'markup',
          '#prefix' => '<div class="draft-text">',
          '#markup' => $draft_text,
          '#suffix' => '</div>',
      ),
  );

  drupal_alter(
  array(
  'entityform_draft_page',
  "entityform_{$entityform_type->type}_draft_page",
  ),
  $render_array,
  $entityform_type,
  $args
  );
  return $render_array;
}


/**
 * Page callback
 */
function entityform_confirm_page($entityform_type) {
  $entityform_id = $_GET['entityform_id'];
  $render_array = array(
      'submit_text' => array(
          '#type' => 'markup',
          '#prefix' => '<div class="submission-text">',
          '#markup' => $entityform_type->data['submission_text'],
          '#suffix' => '</div>',
      ),
  );
  if ($entityform_type->data['submission_show_submitted']) {
    $controller = entity_get_controller('entityform');
    if (!$entityform = entityform_load($entityform_id)) {
      //entityform_id in url was alter return page not found
      return MENU_NOT_FOUND;
    }
    $content = $controller->view(array($entityform->entityform_id => $entityform), 'confirmation', NULL, TRUE);
    $render_array['submission_data'] = $content;
  }

  drupal_alter(
  array(
  'entityform_confirm_page',
  "entityform_{$entityform_type->type}_confirm_page",
  ),
  $render_array,
  $entityform_type,
  $entityform_id
  );

  return $render_array;
}
function entityform_confirm_title($entityform_type) {
  if (!isset($entityform_type->data['submission_page_title']) || empty($entityform_type->data['submission_page_title'])) {
    $default_values = variable_get('entityform_type_defaults', array());
    if (empty($default_values['data']['submission_page_title'])) {
      return 'Thank You';
    }
    return $default_values['data']['submission_page_title'];
  }
  return $entityform_type->data['submission_page_title'];
}
/**
 * Implements hook_entity_insert().
 */
function entityform_entity_insert($entity, $type) {
  if ($type == 'entityform') {
    if (module_exists('rules')) {
    _entityform_invoke_submission_rules($entity);
    }
  }
  elseif ($type == 'entityform_type') {
    if (isset($entity->paths)) {
      foreach ($entity->paths as $key => $path) {
        $path = $entity->paths[$key];
        $path['alias'] = trim($path['alias']);
        // Only save a non-empty alias.
        if (!empty($path['alias'])) {
          // Ensure fields for programmatic executions.
          switch ($key) {
            case 'submit':
              $path['source'] = _entityform_type_get_submit_url($entity->type);
              break;
            case 'confirm':
              $path['source'] = _entityform_type_get_confirm_url($entity->type);
              break;
          }

          $path['language'] = isset($node->language) ? $node->language : LANGUAGE_NONE;
          path_save($path);
        }
      }
    }
  }
}
/**
 * Implements hook_entity_update().
 */
function entityform_entity_update($entity, $type) {
  if ($type == 'entityform' && empty($entity->draft)) {
    if (module_exists('rules')) {
      _entityform_invoke_submission_rules($entity);
    }
  }
  elseif ($type == 'entityform_type') {
    if (isset($entity->paths)) {
      foreach ($entity->paths as $key => $path) {
        $path = $entity->paths[$key];
        $path['alias'] = trim($path['alias']);
        // Delete old alias if user erased it.
        if (!empty($path['pid']) && empty($path['alias'])) {
          path_delete($path['pid']);
        }
        // Only save a non-empty alias.
        if (!empty($path['alias'])) {
          // Ensure fields for programmatic executions.
          switch ($key) {
            case 'submit':
              $path['source'] = _entityform_type_get_submit_url($entity->type);
              break;
            case 'confirm':
              $path['source'] = _entityform_type_get_confirm_url($entity->type);
              break;
          }
          $path['language'] = isset($node->language) ? $node->language : LANGUAGE_NONE;
          path_save($path);
        }
      }
    }
  }
}
/**
 * Page for view submission
 * @param object $entityform_type
 * @return string
 * 	Rendered view
 */
function entityform_submission_page($entityform_type , $display_id = NULL) {
  drupal_set_title($entityform_type->label);
  $submission_view = _entityform_get_type_data_setting($entityform_type, 'submissions_view');
  // Previous setting used "view_name:display_id" - handle that condition.
  $parts = explode(':', $submission_view);
  $view_name = $parts[0];
  $view = views_get_view($view_name);

  $path = current_path();
  $display_ids = array_keys($view->display);
  if (empty($display_id)) {
    // if more than 1 display then get 2nd(non-default)
    $display_id = count($display_ids) > 1? $display_ids[1]:$display_ids[0];
  }
  else {
    // If display_id was passed in path remove it.
    $path_parts = explode('/', $path);
    array_pop($path_parts);
    $path = implode('/', $path_parts);
  }
  // Remove master display.
  array_shift($display_ids);
  $links = '';
  if (count($display_ids) > 1) {
    // Create links to other displays
    foreach ($display_ids as $display) {
      // Don't provide direct links to export displays. These will be attached other displays.
      if ($view->display[$display]->display_plugin != 'views_data_export') {
        $links[] = array(
            'href' => "$path/$display",
            'title' => $view->display[$display]->display_title,
        );
      }
    }
    $links = theme(
        'links',
        array(
            'links' => $links,
            'attributes' => array('class' => 'tabs secondary'))
    );
  }
  return $links . views_embed_view($view_name, $display_id, $entityform_type->type);
}
function _entityform_get_type_data_setting($entityform_type, $setting, $default_value = NULL) {
  static $empty_type;

  if (!empty($entityform_type->data[$setting]) && $entityform_type->data[$setting] != 'default' && $entityform_type->data[$setting] != 'default_view') {
    return $entityform_type->data[$setting];
  }
  else {
    if ($default_value !== NULL) {
      return $default_value;
    }
    if (empty($empty_type)) {
      //Load empty type which will have defaults filled in.
      $empty_type = entity_get_controller('entityform_type')->create();
    }
    if (isset($empty_type->data[$setting])) {
      return $empty_type->data[$setting];
    }
    return NULL;
  }
}
/**
 * Implements hook_menu_local_tasks_alter().
 */
function entityform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/entityforms/add' on 'admin/structure/entityforms'.
  if ($root_path == 'admin/structure/entityforms') {
    $item = menu_get_item('admin/structure/entityforms/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
      );
    }
  }
}
function entityform_render_to_text($render_array, $print_empty_title = FALSE, $indent_text = '') {
  $tab_text = "   ";
  $output = '';
  $markup = '';
  $title = '';
  if (!empty($render_array['#markup'])) {
    $markup .= "$indent_text$tab_text" . htmlspecialchars_decode(strip_tags($render_array['#markup']));
    $markup = trim($markup);
  }
  if (isset($render_array['#title'])) {
    $title .=  htmlspecialchars_decode($render_array['#title']) . ":";
    $title = trim($title);
  }

  if (!empty($markup) && empty($title)) {
    $output .= "\n" . $indent_text . $markup . "\n";
  }
  elseif (!empty($markup) && !empty($title)) {
    $output .= "\n" . $indent_text . $title . "\n" . $indent_text . $tab_text . $markup;
  }
  elseif (empty($markup) && !empty($title)) {
    $output .= "\n" . $indent_text . $title;
  }

  if (!empty($output)) {
    $indent_text .= $tab_text;
  }
  foreach (element_children($render_array) as $child) {
    $child_text  = entityform_render_to_text($render_array[$child], $print_empty_title, $indent_text);
    if (isset($render_array[$child]['#weight'])) {
      $child_array[$render_array[$child]['#weight']] = $child_text;
    }
    else {
      $child_array[] = $child_text;
    }

  }
  if (!empty($child_array)) {
    ksort($child_array);
    $output .= implode('', $child_array);
  }
  return $output;
}
function _entityform_get_submit_info($entityform) {
  $account = user_load($entityform->uid);
  return t("Submitted by !name on !date",
      array(
          '!name' => theme('username', array('account' => $account)),
          '!date' => format_date($entityform->created),
      )
  );
}
/**
 * The class used for entityform entities
 */
class Entityform extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'entityform');
  }

  protected function defaultLabel() {
    $entityform_type = entityform_type_load($this->type);
    return $entityform_type->label;
  }

  protected function defaultUri() {
    return array('path' => 'entityform/' . $this->entityform_id);
  }

  public function getTypeName() {
    $entityform_type = entityform_type_load($this->type);
    return $entityform_type->label;
  }
  /**
   * Returns the user who submitted this profile.
   */
  public function user() {
    return user_load($this->uid);
  }


}


/**
 * The class used for entityform type entities
 */
class EntityformType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'entityform_type');
  }
}


/**
 * The Controller for Entityform entities
 */
class EntityformController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a entityform - we first set up the values that are specific
   * to our entityform schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the entityform.
   *
   * @return
   *   A entityform object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Entityform
    $values += array(
        'entityform_id' => '',
        'is_new' => TRUE,
        'title' => '',
        'created' => '',
        'changed' => '',
        'data' => '',
    );

    $entityform = parent::create($values);
    return $entityform;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content['submission'] = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['info']['user'] =  array(
        '#markup' => _entityform_get_submit_info($entity),
        '#weight' => -100,
    );

    $content['info']['#weight'] = -99;
    return $content;
  }

}


/**
 * The Controller for Entityform entities
 */
class EntityformTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a entityform type - we first set up the values that are specific
   * to our entityform type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the entityform.
   *
   * @return
   *   A entityform type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Entityform

    $default_values = variable_get('entityform_type_defaults', array());
    $values += $default_values;
    $values += array(
        'id' => '',
        'is_new' => TRUE,
        'data' => array(
            'submissions_view' => 'entityforms'
            ),
    );
    $entityform_type = parent::create($values);
    return $entityform_type;
  }
  public function view($entities, $view_mode = 'full', $langcode = NULL, $page = NULL) {
    $view = parent::view($entities, $view_mode, $langcode, $page);
    foreach ($entities as $entity_id => $entity) {
      module_load_include('inc', 'entityform', 'entityform.admin');
      $view['form'][$entity_id] = entityform_form_wrapper(entityform_empty_load($entity->type), 'submit');
    }
    return $view;
  }

}
/**
 * Implements hook_views_pre_view().
 *
 * This add all Fields for the Bundle to the View at runtime
 * View Requirements
 *   1. First argument must bundle machine name
 *   2. All Fields will added if the if the display_id starts with "autofields_
 */
function entityform_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->base_table == 'entityform' && strpos($display_id, 'autofields_') === 0) {
    $type = $view->args[0];
    _entityform_view_add_all_fields($view, $display_id, $type);
  }
  return;
}

/**
 * Add automatically add all the fields for a Bundle to a View
 */
function _entityform_view_add_all_fields(&$view, $display_id, $bundle_name) {
  $instances = field_info_instances('entityform', $bundle_name);
  // when adding autofields to view let view modes determine which fields should be include and in what order
  switch ($display_id) {
    case 'autofields_csv':
    case 'autofields_xml':
      $view_mode = 'download';
      break;
    case 'autofields_table':
      $view_mode = 'table';
      break;
    default:
      $view_mode = 'default';
  }
  $autofields = array();
  foreach ($instances as $instance) {
    $field_display = isset($instance['display'][$view_mode])?$instance['display'][$view_mode]:$instance['display']['default'];
    // don't add to autofields if this field was hidden in the view mode
    if ($field_display['type'] != 'hidden') {
      $autofields[$field_display['weight']] = array(
          'field_name' => $instance['field_name'],
          'options' => array('type' => $field_display['type'], 'settings' => $field_display['settings']),
      );
    }
  }
  // reorder fields to match view mode
  ksort($autofields);
  foreach ($autofields as $field) {
    $view->add_item($display_id, 'field', "field_data_{$field['field_name']}", $field['field_name'], $field['options']);
  }
}
/**
 * Implements hook_help().
 */
function entityform_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/structure/entityform_types/manage/%/display/download':
      $output = t('This View Mode is used to control which fields will be included CSV and XML downloads and their order.');
      break;
    case 'admin/structure/entityform_types/manage/%/display/table':
      $output = t('This View Mode is used to control which fields will be included submissions table and their order.');
      break;
    case 'admin/config/content/entityform':
      $output = t('Set the default settings for new Entityform Types. This will be used for new Entityform Types.');
      break;
  }
  return $output;
}
function entityformtype_metadata_get_properties($entityform_type, array $options, $name, $entity_type) {
  if (isset($entityform_type->data[$name])) {
    return $entityform_type->data[$name];
  }
  return NULL;
}
function _entityform_invoke_submission_rules($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  if (is_array($entityform_type->data['submission_rules'])) {
    foreach ($entityform_type->data['submission_rules'] as $rule_name) {
      rules_invoke_component($rule_name, $entityform, $entityform_type);
    }
  }
}
/*
 * Given a form tree remove the fieldsets from parents so they don't show up in submitted values
* Fieldset elements must end with '_set'
*/
function _entityform_remove_fieldsets_from_tree(&$elements, $parents) {
  //set #parents to skip sets in form values
  foreach (element_children($elements) as $key) {
    if (strrpos($key, '_set') === drupal_strlen($key) - drupal_strlen('_set')) {
      foreach (element_children($elements[$key]) as $sub_key ) {
        $new_parents = $parents;
        $new_parents[] = $sub_key;
        $elements[$key][$sub_key]['#parents'] = $new_parents;
      }
    }
  }
}