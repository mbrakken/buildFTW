<?php

/**
 * @file
 * Profile Lite module.
 */

/**
 * Implements hook_menu_alter().
 */
function profile_lite_menu_alter(&$items) {
  // This menu path is created by CTools, but we need to change it to a local
  // task so that it's visible in the tabs.
  $items['admin/config/people/accounts/profile-lite']['type'] = MENU_LOCAL_TASK;
}

/**
 * Implements hook_permission().
 */
function profile_lite_permission() {
  $permissions = array(
    'administer profile lite categories' =>  array(
      'title' => t('Administer Profile Lite categories'),
      'description' => t('Administer categories, and Edit/view any user profiles.'),
    ),
  );

  ctools_include('export');
  // Generate per profile type permissions.
  foreach (ctools_export_crud_load_all('profile_lite_categories') as $category) {
    $name = check_plain($category->name);
    $permissions += array(
      "edit own $name category" => array(
        'title' => t('%name: Edit own category', array('%name' => $category->label)),
      ),
      "edit any $name category" => array(
        'title' => t('%name: Edit any category', array('%name' => $category->label)),
      ),
      "view own $name category" => array(
        'title' => t('%name: View own category', array('%name' => $category->label)),
      ),
      "view any $name category" => array(
        'title' => t('%name: View any category', array('%name' => $category->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_user_categories().
 */
function profile_lite_user_categories() {
  $items = array();

  ctools_include('export');
  foreach (ctools_export_crud_load_all('profile_lite_categories') as $category) {
    if (empty($category->fields)) {
      continue;
    }

    $items[] = array(
      'name' => $category->name,
      'title' => $category->label,
      // Add an offset so a weight of 0 appears right of the account category.
      'weight' => $category->weight + 3,
      'access callback' => 'profile_lite_category_access',
      'access arguments' => array(1, $category->name),
    );
  }

  return $items;
}

/**
 * Menu item access callback - check if a user has access to a profile category.
 */
function profile_lite_category_access($account, $name) {
  return ($account->uid > 0 && profile_lite_access('edit', $name, $account));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function profile_lite_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'export_ui';
  }
}

/**
 * Implements hook_form_user_profile_form_alter().
 */
function profile_lite_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    return;
  }
  ctools_include('export');
  if ($category = ctools_export_crud_load('profile_lite_categories', $form['#user_category'])) {
    $field_form = $form;
    field_attach_form('user', $form['#user'], $field_form, $form_state);
    foreach (element_children($field_form) as $field_name) {
      if (empty($category->fields[$field_name])) {
        unset($field_form[$field_name]);
        if (isset($field_form['#group_children'][$field_name])) {
          unset($field_form['#group_children'][$field_name]);
        }
      }
      else {
        // Ignore weight for now.
        //$field_form[$field_name]['#weight'] = $category->fields[$field_name]['weight'];
      }
    }
    $form += $field_form;
  }
}

/**
 * Determine if a record already exists for a certain identifier.
 */
function _profile_lite_category_exists($name) {
  foreach (_user_categories() as $category) {
    if ($category['name'] == $name) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Determines whether the given user has access to a category.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $name
 *   The name of the category to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function profile_lite_access($op, $name, $account) {
  if (user_access('administer profile lite categories')) {
    return TRUE;
  }
  if ($op == 'create' || $op == 'update') {
    $op = 'edit';
  }

  ctools_include('export');
  if (($category = ctools_export_crud_load('profile_lite_categories', $name)) && $op != 'delete') {
    if (user_access("$op any $name category")) {
      return TRUE;
    }
    global $user;
    if ($user->uid == $account->uid && user_access("$op own $name category")) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Save a category. We unfortunately cannot rely on ctools_export_crud_save(),
 * because we need to clear the menu cache after an item is saved.
 *
 * @param stdClass $category
 *   The category object to be saved.
 */
function profile_lite_category_save(stdClass $category) {
  if ($category->export_type & EXPORT_IN_DATABASE) {
    // Existing record.
    $update = array('record_id');
  }
  else {
    // New record.
    $update = array();
    $category->export_type = EXPORT_IN_DATABASE;
  }
  if ($result = drupal_write_record('profile_lite_categories', $category, $update)) {
    _profile_lite_invalidate_cache();
  }
  return $result;
}

/**
 * Delete a category. We unfortunately cannot rely on ctools_export_crud_delete(),
 * because we need to clear the menu cache after an item is deleted.
 */
function profile_lite_category_delete(stdClass $category) {
  if (empty($category->record_id)) {
    throw new Exception(t('$category object must contain a record id to be deleted.'));
  }
  db_delete('profile_lite_categories')
    ->condition('record_id', $category->record_id)
    ->execute();
  _profile_lite_invalidate_cache();
}

/**
 * Helper function to clear appropriate caches that affect Profile Categories.
 */
function _profile_lite_invalidate_cache() {
  // First we need to clear Ctools' cache.
  ctools_include('export');
  ctools_export_load_object_reset('profile_lite_categories');
  // Since categories affect the menu, we must rebuild it.
  menu_rebuild();
}
